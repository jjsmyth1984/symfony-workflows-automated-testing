# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Symfony

run-name: ${{ github.actor }} excuting PHP and Symfony automated tests ðŸš€

on:
  push:
    branches: [ "main", "staging" ]
  pull_request:
    branches: [ "main", "staging" ]

permissions:
  contents: read

jobs:
  symfony:
    name: Symfony ${{ matrix.symfony-version }} and PHP ${{ matrix.php-version }} lts
    runs-on: [ ubuntu-latest ] #, [ windows-latest, macos-latest ]

    strategy:
      fail-fast: true
      matrix:

        # Assignments
        php-version:
          - "8.3"
          - "8.4"
        dependency-versions:
          # - "lowest"
          - "highest"
        node-version: [ 20.17.0 ]

        # References only
        symfony-version: [ 7.1.7 ]
        composer-version: [ 2.2.1 ]
        npm-version: [ 9.5.0 ]
        webpack-version: [ 3.12.2 ]
        yarn-version: [ 1.22.22 ]

    steps:

      # Install PHP
      - name: Install PHP ${{ matrix.php-version }} and dependencies
        uses: shivammathur/setup-php@2cb9b829437ee246e9b3cac53555a39208ca6d28
        with:
          php-version: ${{ matrix.php-version }}

      # Check out repository
      - name: Checkout project repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Install Node.js
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Create an .env file and assign DATABASE_URL variable for testing
      - name: Create .env file with DATABASE_URL variable for testing purposes
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          file_name: .env

      # Cache Composer packages
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Install Symfony including dependencies
      - name: Install Symfony ${{ matrix.symfony-version }} including dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      # Install Symfony Bundles
      - name: Install Symfony Bundles
        run: composer require symfony/stimulus-bundle

      # Security checks on installed dependencies
      - name: Security check installed dependencies
        uses: symfonycorp/security-checker-action@v4

      # Analyse PHP Code (PHP_CodeSniffer)
      - name: Check PSR12 code style (PHP_CodeSniffer)
        uses: chekalsky/phpcs-action@v1.2.0
        with:
          enable_warnings: true
          installed_paths: '${{ github.workspace }}/vendor/squizlabs/php_codesniffer'
          phpcs_bin_path: './vendor/bin/phpcs src --ignore="Migrations/"'

      # Executing PHPStan
      - name: Analyse PHP Code (PHPStan)
        run: vendor/bin/phpstan analyse src

      # Create test Symfony Database
      - name: Create test Symfony Database
        run: |
          mkdir -p data
          touch data/database.sqlite

      # Symfony console checks
      - name: Check the Symfony console
        run: |
          php bin/console -V
          php bin/console about    

      # Execute unit tests
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DATABASE_URL: sqlite:///%kernel.project_dir%/data/database.sqlite
        run: vendor/bin/phpunit --testdox
